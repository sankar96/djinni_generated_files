// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from dependency_evaluator.djinni

#import "HWDependencyEvaluator+Private.h"
#import "HWDependencyEvaluator.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "HWUpdatedValues+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface HWDependencyEvaluator ()

- (id)initWithCpp:(const std::shared_ptr<::dependency_evaluator::DependencyEvaluator>&)cppRef;

@end

@implementation HWDependencyEvaluator {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::dependency_evaluator::DependencyEvaluator>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::dependency_evaluator::DependencyEvaluator>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable HWDependencyEvaluator *)create {
    try {
        auto objcpp_result_ = ::dependency_evaluator::DependencyEvaluator::create();
        return ::djinni_generated::DependencyEvaluator::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSString *> *)getParsedString:(nonnull NSString *)expression {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_parsed_string(::djinni::String::toCpp(expression));
        return ::djinni::List<::djinni::String>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)evaluateExpression:(nonnull NSString *)actualExpression
                expression:(nonnull NSArray<NSString *> *)expression
                       row:(int32_t)row
                    column:(int32_t)column
               currentCell:(nonnull NSString *)currentCell {
    try {
        _cppRefHandle.get()->evaluate_expression(::djinni::String::toCpp(actualExpression),
                                                 ::djinni::List<::djinni::String>::toCpp(expression),
                                                 ::djinni::I32::toCpp(row),
                                                 ::djinni::I32::toCpp(column),
                                                 ::djinni::String::toCpp(currentCell));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)storeCellValueConstant:(nonnull NSString *)constant
                           row:(int32_t)row
                        column:(int32_t)column {
    try {
        _cppRefHandle.get()->store_cell_value_constant(::djinni::String::toCpp(constant),
                                                       ::djinni::I32::toCpp(row),
                                                       ::djinni::I32::toCpp(column));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)storeCellValueFormula:(nonnull NSString *)expression {
    try {
        _cppRefHandle.get()->store_cell_value_formula(::djinni::String::toCpp(expression));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<HWUpdatedValues *> *)returnUpdatedValues:(nonnull NSString *)expression
                                                        row:(int32_t)row
                                                     column:(int32_t)column
                                                     source:(nonnull NSString *)source
                                               fromActivity:(int32_t)fromActivity {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->return_updated_values(::djinni::String::toCpp(expression),
                                                                         ::djinni::I32::toCpp(row),
                                                                         ::djinni::I32::toCpp(column),
                                                                         ::djinni::String::toCpp(source),
                                                                         ::djinni::I32::toCpp(fromActivity));
        return ::djinni::List<::djinni_generated::UpdatedValues>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)createHugeMemory {
    try {
        _cppRefHandle.get()->create_huge_memory();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto DependencyEvaluator::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto DependencyEvaluator::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<HWDependencyEvaluator>(cpp);
}

}  // namespace djinni_generated

@end
