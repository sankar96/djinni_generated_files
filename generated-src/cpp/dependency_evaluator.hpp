// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from dependency_evaluator.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace dependency_evaluator {

struct UpdatedValues;

class DependencyEvaluator {
public:
    virtual ~DependencyEvaluator() {}

    static std::shared_ptr<DependencyEvaluator> create();

    virtual std::vector<std::string> get_parsed_string(const std::string & expression) = 0;

    virtual void evaluate_expression(const std::string & actualExpression, const std::vector<std::string> & expression, int32_t row, int32_t column, const std::string & currentCell) = 0;

    virtual void store_cell_value_constant(const std::string & constant, int32_t row, int32_t column) = 0;

    virtual void store_cell_value_formula(const std::string & expression) = 0;

    virtual std::vector<UpdatedValues> return_updated_values(const std::string & expression, int32_t row, int32_t column, const std::string & source, int32_t fromActivity) = 0;

    virtual void create_huge_memory() = 0;
};

}  // namespace dependency_evaluator
