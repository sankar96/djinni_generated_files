// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from dependency_evaluator.djinni

package com.example.sankar_5526.helloworld;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class DependencyEvaluator {
    public abstract ArrayList<String> getParsedString(String expression);

    public abstract void evaluateExpression(String actualExpression, ArrayList<String> expression, int row, int column, String currentCell);

    public abstract void storeCellValueConstant(String constant, int row, int column);

    public abstract void storeCellValueFormula(String expression);

    public abstract ArrayList<UpdatedValues> returnUpdatedValues(String expression, int row, int column, String source, int fromActivity);

    public abstract void createHugeMemory();

    public static native DependencyEvaluator create();

    private static final class CppProxy extends DependencyEvaluator
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public ArrayList<String> getParsedString(String expression)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getParsedString(this.nativeRef, expression);
        }
        private native ArrayList<String> native_getParsedString(long _nativeRef, String expression);

        @Override
        public void evaluateExpression(String actualExpression, ArrayList<String> expression, int row, int column, String currentCell)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_evaluateExpression(this.nativeRef, actualExpression, expression, row, column, currentCell);
        }
        private native void native_evaluateExpression(long _nativeRef, String actualExpression, ArrayList<String> expression, int row, int column, String currentCell);

        @Override
        public void storeCellValueConstant(String constant, int row, int column)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_storeCellValueConstant(this.nativeRef, constant, row, column);
        }
        private native void native_storeCellValueConstant(long _nativeRef, String constant, int row, int column);

        @Override
        public void storeCellValueFormula(String expression)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_storeCellValueFormula(this.nativeRef, expression);
        }
        private native void native_storeCellValueFormula(long _nativeRef, String expression);

        @Override
        public ArrayList<UpdatedValues> returnUpdatedValues(String expression, int row, int column, String source, int fromActivity)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_returnUpdatedValues(this.nativeRef, expression, row, column, source, fromActivity);
        }
        private native ArrayList<UpdatedValues> native_returnUpdatedValues(long _nativeRef, String expression, int row, int column, String source, int fromActivity);

        @Override
        public void createHugeMemory()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_createHugeMemory(this.nativeRef);
        }
        private native void native_createHugeMemory(long _nativeRef);
    }
}
