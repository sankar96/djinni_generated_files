// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from dependency_evaluator.djinni

#include "NativeDependencyEvaluator.hpp"  // my header
#include "Marshal.hpp"
#include "NativeUpdatedValues.hpp"

namespace djinni_generated {

NativeDependencyEvaluator::NativeDependencyEvaluator() : ::djinni::JniInterface<::dependency_evaluator::DependencyEvaluator, NativeDependencyEvaluator>("com/example/sankar_5526/helloworld/DependencyEvaluator$CppProxy") {}

NativeDependencyEvaluator::~NativeDependencyEvaluator() = default;


CJNIEXPORT void JNICALL Java_com_example_sankar_15526_helloworld_DependencyEvaluator_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::dependency_evaluator::DependencyEvaluator>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_example_sankar_15526_helloworld_DependencyEvaluator_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::dependency_evaluator::DependencyEvaluator::create();
        return ::djinni::release(::djinni_generated::NativeDependencyEvaluator::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_example_sankar_15526_helloworld_DependencyEvaluator_00024CppProxy_native_1getParsedString(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_expression)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dependency_evaluator::DependencyEvaluator>(nativeRef);
        auto r = ref->get_parsed_string(::djinni::String::toCpp(jniEnv, j_expression));
        return ::djinni::release(::djinni::List<::djinni::String>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_example_sankar_15526_helloworld_DependencyEvaluator_00024CppProxy_native_1evaluateExpression(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_actualExpression, jobject j_expression, jint j_row, jint j_column, jstring j_currentCell)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dependency_evaluator::DependencyEvaluator>(nativeRef);
        ref->evaluate_expression(::djinni::String::toCpp(jniEnv, j_actualExpression),
                                 ::djinni::List<::djinni::String>::toCpp(jniEnv, j_expression),
                                 ::djinni::I32::toCpp(jniEnv, j_row),
                                 ::djinni::I32::toCpp(jniEnv, j_column),
                                 ::djinni::String::toCpp(jniEnv, j_currentCell));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_example_sankar_15526_helloworld_DependencyEvaluator_00024CppProxy_native_1storeCellValueConstant(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_constant, jint j_row, jint j_column)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dependency_evaluator::DependencyEvaluator>(nativeRef);
        ref->store_cell_value_constant(::djinni::String::toCpp(jniEnv, j_constant),
                                       ::djinni::I32::toCpp(jniEnv, j_row),
                                       ::djinni::I32::toCpp(jniEnv, j_column));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_example_sankar_15526_helloworld_DependencyEvaluator_00024CppProxy_native_1storeCellValueFormula(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_expression)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dependency_evaluator::DependencyEvaluator>(nativeRef);
        ref->store_cell_value_formula(::djinni::String::toCpp(jniEnv, j_expression));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_example_sankar_15526_helloworld_DependencyEvaluator_00024CppProxy_native_1returnUpdatedValues(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_expression, jint j_row, jint j_column, jstring j_source, jint j_fromActivity)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dependency_evaluator::DependencyEvaluator>(nativeRef);
        auto r = ref->return_updated_values(::djinni::String::toCpp(jniEnv, j_expression),
                                            ::djinni::I32::toCpp(jniEnv, j_row),
                                            ::djinni::I32::toCpp(jniEnv, j_column),
                                            ::djinni::String::toCpp(jniEnv, j_source),
                                            ::djinni::I32::toCpp(jniEnv, j_fromActivity));
        return ::djinni::release(::djinni::List<::djinni_generated::NativeUpdatedValues>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_example_sankar_15526_helloworld_DependencyEvaluator_00024CppProxy_native_1createHugeMemory(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dependency_evaluator::DependencyEvaluator>(nativeRef);
        ref->create_huge_memory();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
